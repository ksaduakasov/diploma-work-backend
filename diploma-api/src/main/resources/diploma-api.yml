openapi: 3.0.2
info:
  version: 0.0.1
  title: Diploma Service
  description: The Diploma Service
paths:
  /student/teams:
    get:
      tags: [ Student ]
      description: Get user team
      operationId: getTeam
      responses:
        '200':
          description: Status is OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamInfoWithMembersDto'

  /student/teams/request:
    get:
      tags: [ Student ]
      summary: Receives all requests to join the team
      operationId: getTeamRequests
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTeamInfoByBlockDto'

  /student/teams/request/check:
    get:
      tags: [ Student ]
      summary: Gets all team join requests of user
      operationId: getUserRequests
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamJoinRequestInfoByBlocksDto'

  /student/teams/request/{requestId}/accept:
    post:
      tags: [ Student ]
      summary: Accepts request to join to the team
      operationId: acceptTeamJoinRequest
      parameters:
        - in: path
          name: requestId
          schema:
            type: integer
            format: int64
          required: true
      responses:
        201:
          description: Success

  /student/teams/create:
    post:
      summary: Creates a new team
      tags: [ Student ]
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateUpdateRequest'
      responses:
        201:
          description: Success

  /student/teams/{teamId}/request:
    post:
      summary: Creates a request to join to the team
      tags: [ Student ]
      operationId: createRequestToTeam
      parameters:
        - in: path
          name: teamId
          schema:
            type: integer
            format: int64
          required: true
          description: Team ID
      responses:
        201:
          description: Success

  /student/teams/update:
    put:
      summary: Updates a team
      tags: [ Student ]
      operationId: updateTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateUpdateRequest'
      responses:
        204:
          description: Success

  /advisor/topics:
    get:
      tags: [ Advisor ]
      description: Get list of available topics
      operationId: getAvailableTopics
      responses:
        '200':
          description: Status is OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicInfoByBlocksDto'

  /advisor/topics/{topicId}:
    get:
      tags: [ Advisor ]
      summary: Get topic info by id
      operationId: getTopic
      parameters:
        - in: path
          name: topicId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the topic to get
      responses:
        '200':
          description: Status is OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicInfoByBlocksDto'
    delete:
      tags: [ Advisor ]
      summary: Delete topic by id
      operationId: deleteTopic
      parameters:
        - in: path
          name: topicId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the topic to delete
      responses:
        '204':
          description: Deleted

  /advisor/topics/create:
    post:
      summary: Creates a new topic
      tags: [ Advisor ]
      operationId: createTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreateUpdateRequest'
      responses:
        201:
          description: Success

  /advisor/topics/update:
    put:
      summary: Updates a topic
      tags: [ Advisor ]
      operationId: updateTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreateUpdateRequest'
      responses:
        204:
          description: Success

  /advisor/requests:
    get:
      tags: [ Advisor ]
      summary: Get team-topic requests
      operationId: getAdvisorRequests
      responses:
        '200':
          description: Status is OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicInfoByBlocksDto'

  /auth/signup:
    post:
      tags: [ Auth ]
      description: Register user
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        204:
          description: Success

  /auth/verify/{token}:
    get:
      tags: [ Auth ]
      description: Verify account by token
      operationId: verify
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: User's token
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerifyResponse'
          description: Success

  /auth/login:
    post:
      tags: [ Auth ]
      description: Login user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
          description: Success

  /auth/refresh/token:
    post:
      tags: [ Auth ]
      description: refresh token
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
          description: Success

  /auth/logout:
    post:
      tags: [ Auth ]
      description: Logout user
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
          description: Success

  /admin/user/{userId}:
    get:
      tags: [ Admin ]
      summary: Get user by id
      operationId: getUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the user to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoByBlocksDto'
    delete:
      tags: [ Admin ]
      summary: Delete user by id
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the user to delete
      responses:
        204:
          description: Deleted

  /admin/commission:
    get:
      summary: Gets all commissions
      tags: [ Admin ]
      operationId: getCommissions
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'

  /admin/commission/create:
    post:
      summary: Creates new commission member
      tags: [ Admin ]
      operationId: createCommission
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommissionMemberRequest'
      responses:
        201:
          description: SUCCESS

  /admin/commission/update:
    put:
      summary: Update info about commission member
      tags: [ Admin ]
      operationId: updateCommission
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommissionMemberRequest'
      responses:
        200:
          description: SUCCESS

  /admin/team:
    get:
      summary: Gets all teams
      tags: [ Admin ]
      operationId: getTeams
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamShortInfoDto'

  /admin/team/{teamId}:
    get:
      tags: [ Admin ]
      summary: Get team by id
      operationId: getTeamInfo
      parameters:
        - in: path
          name: teamId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the team to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamInfoByBlocksDto'
    delete:
      tags: [ Admin ]
      summary: Delete user by id
      operationId: deleteTeam
      parameters:
        - in: path
          name: teamId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the team to delete
      responses:
        204:
          description: Deleted

  /admin/team/{teamId}/defence/create:
    post:
      tags: [ Admin ]
      summary: Creates defence for team
      operationId: createDefence
      parameters:
        - in: path
          name: teamId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDefenceRequest'
      responses:
        201:
          description: Success

  /admin/topic/{topicId}:
    get:
      tags: [ Admin ]
      summary: Get topic by id
      operationId: getTopicInfo
      parameters:
        - in: path
          name: topicId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the topic to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicInfoByBlocksDto'
    delete:
      tags: [ Admin ]
      summary: Delete topic by id
      operationId: deleteTopicInfo
      parameters:
        - in: path
          name: topicId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the topic to delete
      responses:
        204:
          description: Deleted

  /admin/group/create:
    post:
      summary: Creates a new group
      tags: [ Admin ]
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDto'
      responses:
        201:
          description: Success

  /admin/group/update:
    put:
      summary: Updates info about group
      tags: [ Admin ]
      operationId: updateGroupInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupDto'
      responses:
        201:
          description: Success

  /admin/group/{groupId}:
    get:
      tags: [ Admin ]
      summary: Get group by id
      operationId: getGroupInfo
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the group to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfoByBlocksDto'
    delete:
      tags: [ Admin ]
      summary: Delete group by id
      operationId: deleteGroupInfo
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the group to delete
      responses:
        204:
          description: Deleted

  /admin/initial/create:
    post:
      summary: Creates a new initial
      tags: [ Admin ]
      operationId: createInitial
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialDto'
      responses:
        201:
          description: Success

  /admin/initial/update:
    put:
      summary: Updates info about initial
      tags: [ Admin ]
      operationId: updateInitialInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitialDto'
      responses:
        201:
          description: Success

  /admin/initial/{initialId}:
    get:
      tags: [ Admin ]
      summary: Get initial by id
      operationId: getInitialInfo
      parameters:
        - in: path
          name: initialId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the group to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitialInfoByBlocksDto'
    delete:
      tags: [ Admin ]
      summary: Delete initial by id
      operationId: deleteInitialInfo
      parameters:
        - in: path
          name: initialId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the initial to delete
      responses:
        204:
          description: Deleted

  /admin/stage/create:
    post:
      summary: Creates a new stage
      tags: [ Admin ]
      operationId: createStage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StageDto'
      responses:
        201:
          description: Success

  /admin/stage/update:
    put:
      summary: Updates info about stage
      tags: [ Admin ]
      operationId: updateStage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StageDto'
      responses:
        201:
          description: Success

  /admin/stage:
    get:
      tags: [ Admin ]
      summary: Get stages
      operationId: getStages
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StageDto'

  /admin/stage/{stageId}:
    get:
      tags: [ Admin ]
      summary: Get stage by id
      operationId: getStage
      parameters:
        - in: path
          name: stageId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the stage to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StageInfoByBlocksDto'
    delete:
      tags: [ Admin ]
      summary: Delete stage by id
      operationId: deleteStage
      parameters:
        - in: path
          name: stageId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the stage to delete
      responses:
        204:
          description: Deleted

  /commission:
    get:
      tags: [ Commission ]
      summary: Get commissions defences
      operationId: getCommissionDefences
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefenceShortInfoDto'

  /commission/{defenceId}:
    get:
      tags: [ Commission ]
      summary: Get commissions defence full info
      operationId: getCommissionDefence
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefenceInfoByBlocksDto'

  /commission/{defenceId}/grades:
    get:
      tags: [ Commission ]
      summary: Gets team members with commission grades
      operationId: getStudentsWithCommissionGrades
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentWithGradeDto'

  /commission/{defenceId}/set-grade/{studentId}:
    post:
      tags: [ Commission ]
      summary: Sets grade of defence
      operationId: setGrade
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
        - in: path
          name: studentId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the student to get
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GradeDto'
      responses:
        201:
          description: SUCCESS

  /commission/{defenceId}/question/create:
    post:
      tags: [ Commission ]
      summary: Creates question of defence
      operationId: CreateDefenceQuestion
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
      responses:
        201:
          description: SUCCESS

  /commission/{defenceId}/question/update:
    put:
      tags: [ Commission ]
      summary: Updates question of defence
      operationId: UpdateDefenceQuestion
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
      responses:
        200:
          description: SUCCESS

  /secretary/defence:
    get:
      tags: [ Secretary ]
      summary: Get secretary defences
      operationId: getSecretaryDefences
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefenceShortInfoDto'

  /secretary/defence/{defenceId}/commissions:
    get:
      tags: [ Secretary ]
      summary: Get defence full info
      operationId: getDefenceCommissions
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'

  /secretary/defence/{defenceId}:
    get:
      tags: [ Secretary ]
      summary: Get defence full info
      operationId: getSecretaryDefence
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefenceInfoByBlocksDto'

  /secretary/{userId}/document/protocol-first:
    get:
      tags: [ Secretary ]
      summary: Get user documents
      operationId: getDocumentFirstProtocol
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the user to get
      responses:
        200:
          description: Returns PDF
          content:
            application/pdf:
              schema:
                type: string
                format: byte

  /secretary/{userId}/document/protocol-second:
    get:
      tags: [ Secretary ]
      summary: Get user documents
      operationId: getDocumentSecondProtocol
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the user to get
      responses:
        200:
          description: Returns PDF
          content:
            application/pdf:
              schema:
                type: string
                format: byte

  /secretary/{defenceId}/question/create:
    post:
      tags: [ Secretary ]
      summary: Creates question of defence
      operationId: createQuestion
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
      responses:
        201:
          description: SUCCESS

  /secretary/{defenceId}/question/update:
    put:
      tags: [ Secretary ]
      summary: Updates question of defence
      operationId: updateQuestion
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
      responses:
        200:
          description: SUCCESS

  /secretary/{defenceId}/grades:
    get:
      tags: [ Secretary ]
      summary: Gets team members with grades
      operationId: getStudentsWithGrades
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentWithGradeDto'

  /secretary/{defenceId}/grades/set-grade/{userId}:
    post:
      tags: [ Secretary ]
      summary: Sets final grade for student
      operationId: setFinalGrade
      parameters:
        - in: path
          name: defenceId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the defence to get
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the user to get
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GradeDto'
      responses:
        200:
          description: SUCCESS

components:
  schemas:

    StudentWithGradeDto:
      description: student with grade
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
        grade:
          type: integer

    GradeDto:
      description: grade DTO
      properties:
        grade:
          type: integer

    TopicDto:
      description: Topic DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        selected:
          type: boolean

    TopicInfoByBlocksDto:
      description: Topic of project
      type: object
      properties:
        topic:
          description: Topic
          type: object
          $ref: '#/components/schemas/TopicDto'
        creator:
          $ref: '#/components/schemas/UserDto'

    InitialDto:
      description: Group initials
      type: object
      properties:
        id:
          description: Initial id
          type: integer
          format: int64
        initial:
          description: Initial
          type: string

    GroupDto:
      description: Group info's
      type: object
      properties:
        id:
          description: Group id
          type: integer
          format: int64
        name:
          type: string
        initial:
          type: string

    GroupInfoByBlocksDto:
      description: Group full info
      type: object
      properties:
        group:
          $ref: '#/components/schemas/GroupDto'
        initial:
          $ref: '#/components/schemas/InitialDto'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'

    InitialInfoByBlocksDto:
      type: object
      properties:
        initial:
          $ref: '#/components/schemas/InitialDto'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupDto'

    UserInfoByBlocksDto:
      description: User full info
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        role:
          $ref: '#/components/schemas/RoleDto'
        group:
          $ref: '#/components/schemas/GroupDto'

    ShortUserInfoRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
      required:
        - email
        - username
        - password

    UserDto:
      description: User info
      type: object
      properties:
        id:
          description: User id
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        email:
          type: string

    RoleDto:
      description: Role info
      type: object
      properties:
        id:
          description: Role id
          type: integer
          format: int64
        name:
          description: Role name
          type: string

    TeamCreateUpdateRequest:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
        name:
          type: string
        topicId:
          type: integer
          format: int64
        advisorId:
          type: integer
          format: int64
        choices:
          type: integer
      required:
        - name
        - creatorId

    TopicCreateUpdateRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        initial:
          type: string
      required:
        - creatorId
        - name
        - initial

    RegisterRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
      required:
        - email
        - username
        - password

    CreateCommissionMemberRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
      required:
        - email
        - username
        - password

    TokenVerifyResponse:
      type: object
      properties:
        message:
          type: string

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    RefreshTokenRequest:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
      required:
        - token
        - password

    RefreshTokenResponse:
      type: object
      properties:
        token:
          type: string

    AuthenticationResponse:
      type: object
      properties:
        authenticationToken:
          type: string
        username:
          type: string
        role:
          type: string
        refreshToken:
          type: string
        expiresAt:
          type: string
          format: date-time

    LogoutResponse:
      type: object
      properties:
        message:
          type: string

    DefenceInfoByBlocksDto:
      type: object
      properties:
        defence:
          $ref: '#/components/schemas/DefenceDto'
        team:
          $ref: '#/components/schemas/TeamInfoWithMembersDto'
        stage:
          $ref: '#/components/schemas/StageDto'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionDto'

    DefenceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        defenceDate:
          type: string
          format: date-time
        stage:
          $ref: '#/components/schemas/StageDto'

    DefenceShortInfoDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        defenceDate:
          type: string
          format: date-time
        topic:
          type: string
        team:
          type: string
        stage:
          type: string

    StageDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    QuestionCreateUpdateRequest:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        description:
          type: string
        studentIds:
          type: array
          items:
            type: integer
            format: int64
        questionerId:
          type: integer
          format: int64

    QuestionDto:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        description:
          type: string
        responderName:
          type: string
        questioner:
          type: string

    TeamInfoByBlocksDto:
      type: object
      properties:
        team:
          $ref: '#/components/schemas/TeamShortInfoDto'
        creator:
          $ref: '#/components/schemas/UserDto'
        topic:
          $ref: '#/components/schemas/TopicDto'
        advisor:
          $ref: '#/components/schemas/UserDto'
        defences:
          type: array
          items:
            $ref: '#/components/schemas/DefenceDto'
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'

    #    AdminPanelGeneralInfoDto:
    #      type: object
    #      properties:
    #        defences:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/DefenceInfoByBlocksDto'
    #        teams:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/TeamInfoByBlocksDto'
    #        topics:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/TopicInfoByBlocksDto'
    #        stages:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/StageDto'
    #        initials:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/InitialDto'
    #        users:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/UserInfoByBlocksDto'
    #        groups:
    #          type: array
    #          items:
    #            $ref: '#/components/schemas/GroupDto'

    UserTeamInfoByBlockDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserDto'
        team:
          $ref: '#/components/schemas/TeamShortInfoDto'
        group:
          $ref: '#/components/schemas/GroupDto'

    TeamInfoWithMembersDto:
      type: object
      properties:
        team:
          $ref: '#/components/schemas/TeamShortInfoDto'
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'

    TeamJoinRequestInfoByBlocksDto:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/RequestDto'
        team:
          $ref: '#/components/schemas/TeamShortInfoDto'

    RequestDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        accepted:
          type: boolean

    StageInfoByBlocksDto:
      type: object
      properties:
        stage:
          $ref: '#/components/schemas/StageDto'
        defences:
          type: array
          items:
            $ref: '#/components/schemas/DefenceDto'

    TeamShortInfoDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        topic:
          type: string
        advisor:
          type: string

    CreateDefenceRequest:
      type: object
      properties:
        defenceDate:
          type: string
          format: date-time
        commissions:
          type: array
          items:
            type: integer
            format: int64
        stageId:
          type: integer
          format: int64

    QuestionInfoDto:
      type: object
      properties:
        description:
          type: string
        questioner:
          $ref: '#/components/schemas/UserDto'


    InfoForDocumentTemplateDto:
      type: object
      properties:
        commissions:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        student:
          $ref: '#/components/schemas/StudentShortInfoDto'
        defence:
          $ref: '#/components/schemas/DefenceShortInfoDto'
        advisor:
          $ref: '#/components/schemas/UserDto'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionInfoDto'
        grade:
          type: integer

    StudentShortInfoDto:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        group:
          type: string
